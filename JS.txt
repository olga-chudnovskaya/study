Структура кода

Инструкции

Инструкции – это синтаксические конструкции и команды, которые выполняют действия.

alert('#'); - вывод сообщения на экран
console.log("#"); - вывод сообщения в консоль
# - имя переменной

; - В большинстве случаев новая строка подразумевает точку с запятой. Но «в большинстве случаев» не значит «всегда»!


Коментарии:
// - Однострочные комментариq (от // до конца строки)
/* */ - Многострочные комментарии (между /*  */)

Переменные

Переменная – это «именованное хранилище» для данных.

Имена переменных

В JavaScript есть два ограничения, касающиеся имён переменных:

1) Имя переменной должно содержать только буквы, цифры или символы $ и _.
2) Первый символ не должен быть цифрой.
!Регистр имеет значение (Переменные с именами apple и AppLE – это две разные переменные.)

Сначала нужно объявить переменную с помощью служебных слов:
let имя; - новый способ объявить переменную
var имя; - устаревший способ объявить переменную

Присваивание значения:
let $ = 1; // объявили переменную с именем "$"
Присваивание значения - знак равно(=)
let admin, name; // можно объявить две переменные через запятую
Значения переменных можно менять.

Константы

Это переменные, объявленные с помощью const. Значения присваиваются сразу при объявлении, менять значение нельзя!

const myBirthday = '18.04.1982';

Базовые операторы

Математика
Поддерживаются следующие математические операторы:

Сложение +,
Вычитание -,
Умножение *,
Деление /,
Взятие остатка от деления %,
Возведение в степень **.

Приоритет операторов

Инкремент/декремент
 увеличение или уменьшение на единицу.
Инкремент ++ увеличивает переменную на 1:

let counter = 2;
counter++;        // работает как counter = counter + 1, просто запись короче
alert( counter ); // 3
Декремент -- уменьшает переменную на 1:

let counter = 2;
counter--;        // работает как counter = counter - 1, просто запись короче
alert( counter ); // 1

Операторы ++ и -- могут быть расположены не только после, но и до переменной.

Когда оператор идёт после переменной — это «постфиксная форма»: counter++.
«Префиксная форма» — это когда оператор идёт перед переменной: ++counter.
Обе эти инструкции делают одно и то же: увеличивают counter на 1.

Операторы сравнения

В JavaScript они записываются так:
Больше/меньше: a > b, a < b.
Больше/меньше или равно: a >= b, a <= b.
Равно: a == b. Обратите внимание, для сравнения используется двойной знак равенства ==. Один знак равенства a = b означал бы присваивание.
Не равно. В математике обозначается символом ≠, но в JavaScript записывается как a != b.
Результат сравнения имеет логический тип
Все операторы сравнения возвращают значение логического типа:

true – означает «да», «верно», «истина».
false – означает «нет», «неверно», «ложь».
Все операторы сравнения возвращают значение логического типа:

true – означает «да», «верно», «истина».
false – означает «нет», «неверно», «ложь».
Например:

alert( 2 > 1 );  // true (верно)
alert( 2 == 1 ); // false (неверно)
alert( 2 != 1 ); // true (верно)
Результат сравнения можно присвоить переменной, как и любое значение:

let result = 5 > 4; // результат сравнения присваивается переменной result
alert( result ); // true


Логические операторы

&& (И) - находит первое ложное значение
В традиционном программировании И возвращает true, если оба аргумента истинны, а иначе – false:
alert( true && true );   // true
alert( false && true );  // false
alert( true && false );  // false
alert( false && false ); // false


|| (ИЛИ) - находит первое истинное значение
Существует всего четыре возможные логические комбинации:
alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false

ИЛИ «||» находит первое истинное значение
Оператор || выполняет следующие действия:

Вычисляет операнды слева направо.
Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
Если все операнды являются ложными (false), возвращает последний из них.
Значение возвращается в исходном виде, без преобразования.


Типы данных

Число
Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой.

Существует множество операций для чисел, например, умножение *, деление /, сложение +, вычитание - и так далее.

Кроме обычных чисел, существуют так называемые «специальные числовые значения», которые относятся к этому типу данных: Infinity, -Infinity и NaN.

Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.

Мы можем получить его в результате деления на ноль:

alert( 1 / 0 ); // Infinity
Или задать его явно:

alert( Infinity ); // Infinity
NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции, например:

alert( "не число" / 2 ); // NaN, такое деление является ошибкой
Значение NaN «прилипчиво». Любая операция с NaN возвращает NaN:

alert( "не число" / 2 + 5 ); // NaN
Если где-то в математическом выражении есть NaN, то результатом вычислений с его участием будет NaN.
 NaN никогда ничему не равно!

Математические операции – безопасны
Математические операции в JavaScript «безопасны». Мы можем делать что угодно: делить на ноль, обращаться с нечисловыми строками как с числами и т.д.

Скрипт никогда не остановится с фатальной ошибкой (не «умрёт»). В худшем случае мы получим NaN как результат выполнения.

BigInt

Строка
Строка (string) в JavaScript должна быть заключена в кавычки.

let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;
В JavaScript существует три типа кавычек.

Двойные кавычки: "Привет".
Одинарные кавычки: 'Привет'.
Обратные кавычки: `Привет`.
Двойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript.

Обратные же кавычки имеют расширенную функциональность. Они позволяют нам встраивать выражения в строку, заключая их в ${…}. Например:

let name = "Иван";

// Вставим переменную
alert( `Привет, ${name}!` ); // Привет, Иван!

// Вставим выражение
alert( `результат: ${1 + 2}` ); // результат: 3
Другими словами, цепочка ИЛИ "||" возвращает первое истинное значение или последнее, если такое значение не найдено.


